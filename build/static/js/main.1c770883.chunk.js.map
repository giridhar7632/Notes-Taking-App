{"version":3,"sources":["ColorModeSwitcher.js","components/Login.js","components/notes/EditNote.js","components/NotesShell.js","components/notes/CreateNote.js","components/notes/Header.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","Login","setIsLogin","useState","name","email","password","user","setUser","show","setShow","isRegistered","setIsRegistered","toast","useToast","toastIdRef","useRef","addToast","type","current","title","status","isClosable","duration","handleChange","e","target","value","handlePassword","registerUser","a","preventDefault","axios","post","username","res","data","msg","response","userLogin","localStorage","setItem","token","direction","className","p","flexDirection","justifyContent","onSubmit","as","textAlign","mb","id","isRequired","onChange","placeholder","mt","pr","width","h","colorScheme","EditNote","children","noteId","content","date","note","setNote","useDisclosure","isOpen","onOpen","onClose","initialRef","getNote","getItem","get","headers","Authorization","console","log","Date","toLocaleDateString","_id","editNote","newNote","put","window","location","href","initialFocusRef","pb","ref","mr","NotesShell","notes","setNotes","setToken","getNotes","useEffect","deleteNote","delete","w","length","templateColumns","gap","m","map","shadow","borderWidth","flex","borderRadius","isTruncated","my","noOfLines","spacing","format","alignItems","opacity","CreateNote","createNote","Header","ml","fontWeight","clear","App","isLogin","verified","checkLogin","theme","justifySelf","maxW","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1c770883.chunk.js","sourcesContent":["import React from 'react'\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react'\nimport { FaMoon, FaSun } from 'react-icons/fa'\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue('dark', 'light')\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"solid\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  )\n}\n","import { Button } from '@chakra-ui/button'\r\nimport { FormControl, FormLabel } from '@chakra-ui/form-control'\r\nimport { Input, InputGroup, InputRightElement } from '@chakra-ui/input'\r\nimport { Flex, Heading, Link, Stack, Text } from '@chakra-ui/layout'\r\nimport { useToast } from '@chakra-ui/toast'\r\nimport axios from 'axios'\r\nimport React, { useRef, useState } from 'react'\r\n\r\nconst Login = ({ setIsLogin }) => {\r\n  const [user, setUser] = useState({\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n  })\r\n  const [show, setShow] = useState(false)\r\n  const [isRegistered, setIsRegistered] = useState(true)\r\n\r\n  const toast = useToast()\r\n  const toastIdRef = useRef()\r\n  const addToast = (text, type) => {\r\n    toastIdRef.current = toast({\r\n      title: `${text}`,\r\n      status: `${type}`,\r\n      isClosable: true,\r\n      duration: 3000,\r\n    })\r\n  }\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target\r\n    setUser({ ...user, [name]: value })\r\n  }\r\n  const handlePassword = () => setShow(!show)\r\n  const handleResigter = () => setIsRegistered(!isRegistered)\r\n  const handleLogin = () => setIsRegistered(!isRegistered)\r\n\r\n  const registerUser = async e => {\r\n    e.preventDefault()\r\n    try {\r\n      const res = await axios.post('/users/register', {\r\n        username: user.name,\r\n        email: user.email,\r\n        password: user.password,\r\n      })\r\n      setUser({ name: '', email: '', password: '' })\r\n      addToast(res.data.msg, res.data.type)\r\n      setIsRegistered(true)\r\n    } catch (error) {\r\n      error.response.data.msg &&\r\n        addToast(error.response.data.msg, error.response.data.type)\r\n    }\r\n  }\r\n\r\n  const userLogin = async e => {\r\n    e.preventDefault()\r\n    try {\r\n      const res = await axios.post('/users/login', {\r\n        email: user.email,\r\n        password: user.password,\r\n      })\r\n      setUser({ name: '', email: '', password: '' })\r\n      addToast(res.data.msg, 'success')\r\n      localStorage.setItem('tokenStore', res.data.token)\r\n      setIsLogin(true)\r\n    } catch (error) {\r\n      error.response.data.msg &&\r\n        addToast(error.response.data.msg, error.response.data.type)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Stack direction=\"column\">\r\n      {isRegistered ? (\r\n        <Flex\r\n          className=\"login\"\r\n          p=\"6\"\r\n          flexDirection=\"column\"\r\n          justifyContent=\"center\"\r\n        >\r\n          <form onSubmit={userLogin}>\r\n            <Heading as=\"h2\" size=\"lg\" textAlign=\"center\" mb={6}>\r\n              Login\r\n            </Heading>\r\n            <FormControl id=\"email\" isRequired>\r\n              <FormLabel>Email</FormLabel>\r\n              <Input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                value={user.email}\r\n                onChange={handleChange}\r\n                placeholder=\"Email\"\r\n              />\r\n            </FormControl>\r\n            <FormControl id=\"password\" mt=\"2\" isRequired>\r\n              <FormLabel>Password</FormLabel>\r\n              <InputGroup size=\"md\">\r\n                <Input\r\n                  pr=\"4.5rem\"\r\n                  type={show ? 'text' : 'password'}\r\n                  name=\"password\"\r\n                  value={user.password}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Enter password\"\r\n                />\r\n                <InputRightElement width=\"4.5rem\">\r\n                  <Button h=\"1.75rem\" size=\"sm\" onClick={handlePassword}>\r\n                    {show ? 'Hide' : 'Show'}\r\n                  </Button>\r\n                </InputRightElement>\r\n              </InputGroup>\r\n            </FormControl>\r\n            <Button mt={6} type=\"submit\" colorScheme=\"purple\" variant=\"solid\">\r\n              Login\r\n            </Button>\r\n          </form>\r\n          <Text mt={6}>\r\n            Don't have an account?{' '}\r\n            <Link color=\"purple.500\" onClick={handleResigter}>\r\n              Register now\r\n            </Link>\r\n          </Text>\r\n        </Flex>\r\n      ) : (\r\n        <Flex\r\n          className=\"register\"\r\n          p=\"6\"\r\n          flexDirection=\"column\"\r\n          justifyContent=\"center\"\r\n        >\r\n          <form onSubmit={registerUser}>\r\n            <Heading as=\"h2\" size=\"lg\" textAlign=\"center\" mb={6}>\r\n              Register\r\n            </Heading>\r\n            <FormControl id=\"username\" isRequired>\r\n              <FormLabel>Username</FormLabel>\r\n              <Input\r\n                value={user.name}\r\n                name=\"name\"\r\n                onChange={handleChange}\r\n                placeholder=\"Username\"\r\n              />\r\n            </FormControl>\r\n            <FormControl id=\"email\" mt=\"2\" isRequired>\r\n              <FormLabel>Email</FormLabel>\r\n              <Input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                value={user.email}\r\n                onChange={handleChange}\r\n                placeholder=\"Email\"\r\n              />\r\n            </FormControl>\r\n            <FormControl id=\"password\" mt=\"2\" isRequired>\r\n              <FormLabel>Password</FormLabel>\r\n              <InputGroup size=\"md\">\r\n                <Input\r\n                  pr=\"4.5rem\"\r\n                  type={show ? 'text' : 'password'}\r\n                  value={user.password}\r\n                  name=\"password\"\r\n                  onChange={handleChange}\r\n                  placeholder=\"Enter password\"\r\n                />\r\n                <InputRightElement width=\"4.5rem\">\r\n                  <Button h=\"1.75rem\" size=\"sm\" onClick={handlePassword}>\r\n                    {show ? 'Hide' : 'Show'}\r\n                  </Button>\r\n                </InputRightElement>\r\n              </InputGroup>\r\n            </FormControl>\r\n            <Button mt={6} type=\"submit\" colorScheme=\"purple\" variant=\"solid\">\r\n              Register\r\n            </Button>\r\n          </form>\r\n          <Text mt={6}>\r\n            Already have an account?{' '}\r\n            <Link color=\"purple.500\" onClick={handleLogin}>\r\n              Sign in\r\n            </Link>\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n    </Stack>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","import React, { useRef, useState } from 'react'\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  useDisclosure,\r\n  useToast,\r\n  Textarea,\r\n} from '@chakra-ui/react'\r\nimport axios from 'axios'\r\n\r\nconst EditNote = ({ children, noteId }) => {\r\n  const [note, setNote] = useState({\r\n    title: '',\r\n    content: '',\r\n    date: '',\r\n    id: '',\r\n  })\r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure()\r\n  const initialRef = useRef()\r\n\r\n  const toast = useToast()\r\n  const toastIdRef = useRef()\r\n  const addToast = (text, type) => {\r\n    toastIdRef.current = toast({\r\n      title: `${text}`,\r\n      status: `${type}`,\r\n      isClosable: true,\r\n      duration: 3000,\r\n    })\r\n  }\r\n\r\n  const getNote = async () => {\r\n    onOpen()\r\n    const token = localStorage.getItem('tokenStore')\r\n    if (noteId) {\r\n      const res = await axios.get(`/api/notes/${noteId}`, {\r\n        headers: { Authorization: token },\r\n      })\r\n      console.log(res.data.date)\r\n      setNote({\r\n        title: res.data.title,\r\n        content: res.data.content,\r\n        date: new Date(res.data.date).toLocaleDateString(),\r\n        id: res.data._id,\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target\r\n    setNote({ ...note, [name]: value })\r\n  }\r\n\r\n  const editNote = async e => {\r\n    e.preventDefault()\r\n    try {\r\n      const token = localStorage.getItem('tokenStore')\r\n      if (token) {\r\n        const { title, content, date, id } = note\r\n        const newNote = { title, content, date }\r\n\r\n        const res = await axios.put(`/api/notes/${id}`, newNote, {\r\n          headers: { Authorization: token },\r\n        })\r\n        addToast(res.data.msg, res.data.type)\r\n        window.location.href = '/'\r\n      }\r\n    } catch (error) {\r\n      window.location.href = '/'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={getNote}>{children}</Button>\r\n      <Modal initialFocusRef={initialRef} isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Edit Note</ModalHeader>\r\n          <ModalCloseButton />\r\n          <form onSubmit={editNote}>\r\n            <ModalBody pb={6}>\r\n              <FormControl>\r\n                <FormLabel>Title</FormLabel>\r\n                <Input\r\n                  name=\"title\"\r\n                  value={note.title}\r\n                  onChange={handleChange}\r\n                  ref={initialRef}\r\n                  placeholder=\"value\"\r\n                />\r\n              </FormControl>\r\n\r\n              <FormControl mt={4}>\r\n                <FormLabel>Content</FormLabel>\r\n                <Textarea\r\n                  name=\"content\"\r\n                  value={note.content}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Content of the note\"\r\n                />\r\n              </FormControl>\r\n\r\n              <FormControl mt={4}>\r\n                <FormLabel>Date: {note.date}</FormLabel>\r\n                <Input\r\n                  name=\"date\"\r\n                  value={note.date}\r\n                  onChange={handleChange}\r\n                  type=\"date\"\r\n                />\r\n              </FormControl>\r\n            </ModalBody>\r\n\r\n            <ModalFooter>\r\n              <Button\r\n                onClick={onClose}\r\n                type=\"submit\"\r\n                colorScheme=\"purple\"\r\n                mr={3}\r\n              >\r\n                Save\r\n              </Button>\r\n              <Button onClick={onClose}>Cancel</Button>\r\n            </ModalFooter>\r\n          </form>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EditNote\r\n","import React, { useState, useEffect } from 'react'\r\nimport { IconButton } from '@chakra-ui/button'\r\nimport {\r\n  Flex,\r\n  Grid,\r\n  Box,\r\n  Heading,\r\n  HStack,\r\n  Stack,\r\n  Text,\r\n} from '@chakra-ui/layout'\r\nimport { format } from 'timeago.js'\r\nimport { FaTrashAlt } from 'react-icons/fa'\r\nimport EditNote from './notes/EditNote'\r\nimport axios from 'axios'\r\n\r\nconst NotesShell = () => {\r\n  const [notes, setNotes] = useState([])\r\n  const [token, setToken] = useState('')\r\n\r\n  const getNotes = async token => {\r\n    const res = await axios.get('api/notes', {\r\n      headers: { Authorization: token },\r\n    })\r\n    setNotes(res.data)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('tokenStore')\r\n    setToken(token)\r\n    if (token) {\r\n      getNotes(token)\r\n    }\r\n  }, [])\r\n\r\n  const deleteNote = async id => {\r\n    try {\r\n      if (token) {\r\n        await axios.delete(`api/notes/${id}`, {\r\n          headers: { Authorization: token },\r\n        })\r\n        getNotes(token)\r\n      }\r\n    } catch (error) {\r\n      window.location.href = '/'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Flex w=\"100%\" flexDirection=\"column\" mb={8}>\r\n      {!notes.length ? (\r\n        <Flex\r\n          h={['30vh', '50vh']}\r\n          w=\"100%\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Text fontSize={['2xl', '3xl']} opacity=\"0.2\">\r\n            No Notes Added\r\n          </Text>\r\n        </Flex>\r\n      ) : (\r\n        <Grid\r\n          templateColumns={[\r\n            'repeat(1, 1fr)',\r\n            'repeat(2, 1fr)',\r\n            'repeat(3, 1fr)',\r\n          ]}\r\n          gap={6}\r\n          m=\"0 auto\"\r\n          w={['100%', '90%', '85%']}\r\n        >\r\n          {notes.map(note => (\r\n            <Box\r\n              w=\"100%\"\r\n              p={5}\r\n              shadow=\"md\"\r\n              borderWidth=\"1px\"\r\n              flex=\"1\"\r\n              borderRadius=\"md\"\r\n              key={note._id}\r\n            >\r\n              <Heading size=\"md\" isTruncated>\r\n                {note.title}\r\n              </Heading>\r\n              <Text my={4} noOfLines={[3, 4, 5]}>\r\n                {note.content}\r\n              </Text>\r\n              <Stack spacing={4}>\r\n                <HStack justifyContent=\"space-between\">\r\n                  <Text color=\"purple.500\">{note.name}</Text>\r\n                  <Text>{format(note.date)}</Text>\r\n                </HStack>\r\n                <HStack justifyContent=\"space-between\">\r\n                  <EditNote noteId={note._id}>Edit</EditNote>\r\n                  <IconButton\r\n                    onClick={() => deleteNote(note._id)}\r\n                    colorScheme=\"red\"\r\n                    variant=\"solid\"\r\n                    size=\"md\"\r\n                    icon={<FaTrashAlt />}\r\n                  ></IconButton>\r\n                </HStack>\r\n              </Stack>\r\n            </Box>\r\n          ))}\r\n        </Grid>\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default NotesShell\r\n","import React, { useRef, useState } from 'react'\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  useDisclosure,\r\n  useToast,\r\n  Textarea,\r\n} from '@chakra-ui/react'\r\nimport axios from 'axios'\r\n\r\nconst CreateNote = ({ children }) => {\r\n  const [note, setNote] = useState({\r\n    title: '',\r\n    content: '',\r\n    date: '',\r\n  })\r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure()\r\n  const initialRef = useRef()\r\n\r\n  const toast = useToast()\r\n  const toastIdRef = useRef()\r\n  const addToast = (text, type) => {\r\n    toastIdRef.current = toast({\r\n      title: `${text}`,\r\n      status: `${type}`,\r\n      isClosable: true,\r\n      duration: 3000,\r\n    })\r\n  }\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target\r\n    setNote({ ...note, [name]: value })\r\n  }\r\n\r\n  const createNote = async e => {\r\n    e.preventDefault()\r\n    try {\r\n      const token = localStorage.getItem('tokenStore')\r\n      if (token) {\r\n        const { title, content, date } = note\r\n        const newNote = { title, content, date }\r\n\r\n        const res = await axios.post('/api/notes', newNote, {\r\n          headers: { Authorization: token },\r\n        })\r\n        addToast(res.data.msg, res.data.type)\r\n        window.location.href = '/'\r\n      }\r\n    } catch (error) {\r\n      window.location.href = '/'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Button mr={4} variant=\"solid\" size=\"md\" onClick={onOpen}>\r\n        {children}\r\n      </Button>\r\n      <Modal initialFocusRef={initialRef} isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Create a Note</ModalHeader>\r\n          <ModalCloseButton />\r\n          <form onSubmit={createNote}>\r\n            <ModalBody pb={6}>\r\n              <FormControl>\r\n                <FormLabel>Title</FormLabel>\r\n                <Input\r\n                  name=\"title\"\r\n                  ref={initialRef}\r\n                  value={note.title}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Untitled\"\r\n                />\r\n              </FormControl>\r\n\r\n              <FormControl mt={4} isRequired>\r\n                <FormLabel>Content</FormLabel>\r\n                <Textarea\r\n                  name=\"content\"\r\n                  value={note.content}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Content of the note\"\r\n                />\r\n              </FormControl>\r\n\r\n              <FormControl mt={4}>\r\n                <FormLabel>Date</FormLabel>\r\n                <Input\r\n                  name=\"date\"\r\n                  value={note.date}\r\n                  onChange={handleChange}\r\n                  type=\"date\"\r\n                />\r\n              </FormControl>\r\n            </ModalBody>\r\n\r\n            <ModalFooter>\r\n              <Button\r\n                type=\"submit\"\r\n                colorScheme=\"purple\"\r\n                mr={3}\r\n                onClick={onClose}\r\n              >\r\n                Add Note\r\n              </Button>\r\n              <Button onClick={onClose}>Cancel</Button>\r\n            </ModalFooter>\r\n          </form>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CreateNote\r\n","import React from 'react'\r\nimport { Flex, Button, Text } from '@chakra-ui/react'\r\nimport { FaEdit } from 'react-icons/fa'\r\nimport { ColorModeSwitcher } from '../../ColorModeSwitcher'\r\nimport CreateNote from './CreateNote'\r\n\r\nconst Header = ({ setIsLogin }) => {\r\n  const logOut = () => {\r\n    localStorage.clear()\r\n    setIsLogin(false)\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      justifyContent=\"space-between\"\r\n      w=\"100%\"\r\n      flexDirection={['column', 'row']}\r\n    >\r\n      <Flex justifyContent=\"center\" alignItems=\"center\" mb={4}>\r\n        <FaEdit size=\"24px\" />\r\n        <Text ml={4} textAlign=\"center\" fontWeight=\"bold\" fontSize=\"2xl\">\r\n          Notes App\r\n        </Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <CreateNote>+ Add Note</CreateNote>\r\n        <Button onClick={logOut} mr={2} variant=\"solid\" size=\"md\">\r\n          Logout\r\n        </Button>\r\n        <ColorModeSwitcher />\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React, { useEffect, useState } from 'react'\nimport { ChakraProvider, Flex, theme } from '@chakra-ui/react'\nimport { ColorModeSwitcher } from './ColorModeSwitcher'\n\nimport Login from './components/Login'\nimport NotesShell from './components/NotesShell'\nimport axios from 'axios'\nimport Header from './components/notes/Header'\n\nfunction App() {\n  const [isLogin, setIsLogin] = useState(false)\n  useEffect(() => {\n    const checkLogin = async () => {\n      const token = localStorage.getItem('tokenStore')\n      if (token) {\n        const verified = await axios.get('/users/verify', {\n          headers: { Authorization: token },\n        })\n        setIsLogin(verified.data)\n        if (verified.data === false) return localStorage.clear()\n      } else {\n        setIsLogin(false)\n      }\n    }\n    checkLogin()\n  }, [])\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Flex p={8} h=\"100vh\" flexDirection=\"column\" textAlign=\"center\">\n        {isLogin ? (\n          <Header setIsLogin={setIsLogin} />\n        ) : (\n          <Flex justifyContent=\"flex-end\">\n            <ColorModeSwitcher justifySelf=\"flex-end\" />\n          </Flex>\n        )}\n        <Flex maxW=\"100%\" justifyContent=\"center\" mt={8}>\n          {isLogin ? <NotesShell /> : <Login setIsLogin={setIsLogin} />}\n        </Flex>\n      </Flex>\n    </ChakraProvider>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}